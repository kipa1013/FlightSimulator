//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlaneInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlaneInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlaneInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlaneInput"",
    ""maps"": [
        {
            ""name"": ""Plane"",
            ""id"": ""bef7b0d9-4fde-4114-bed9-a569c304773f"",
            ""actions"": [
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""5b6d2242-3476-4228-84b2-0b0ff7a976a2"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Value"",
                    ""id"": ""a7045083-cae4-470e-9cde-0e782bd18900"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Flaps"",
                    ""type"": ""Button"",
                    ""id"": ""3767372c-2f91-47fa-8fdd-cbdba0415398"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Break"",
                    ""type"": ""Button"",
                    ""id"": ""6574ef43-c81e-4699-a264-d3662f4b610d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""4f5d2da6-1eb2-4c49-af20-2a7a56ffaa4f"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6dfcbaf2-0551-4a4b-9c7a-ecb197702cc9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bdfecf89-5071-4390-b697-e73e2adb4943"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f1d3e7e8-df90-471b-9f62-b1a8c9b7d153"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5c52a4aa-5319-4c2a-8979-e04b90953ee0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""74ee0592-8968-401e-86b2-4d0086507330"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""8b486199-be49-470d-bd1e-515acb35796b"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""77356640-9125-4966-9809-d8f113d54953"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fe2fd486-254a-4bbc-adcb-3d6c455e0421"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7d8a2ea0-2c10-4a9f-99a2-3be2a753436e"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ab9eaa2a-465a-4969-9410-016a64cf6924"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flaps"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4f87dd5-8f0a-4999-9b54-a3681d18707f"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Break"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Plane
        m_Plane = asset.FindActionMap("Plane", throwIfNotFound: true);
        m_Plane_Steering = m_Plane.FindAction("Steering", throwIfNotFound: true);
        m_Plane_Thrust = m_Plane.FindAction("Thrust", throwIfNotFound: true);
        m_Plane_Flaps = m_Plane.FindAction("Flaps", throwIfNotFound: true);
        m_Plane_Break = m_Plane.FindAction("Break", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Plane
    private readonly InputActionMap m_Plane;
    private IPlaneActions m_PlaneActionsCallbackInterface;
    private readonly InputAction m_Plane_Steering;
    private readonly InputAction m_Plane_Thrust;
    private readonly InputAction m_Plane_Flaps;
    private readonly InputAction m_Plane_Break;
    public struct PlaneActions
    {
        private @PlaneInput m_Wrapper;
        public PlaneActions(@PlaneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Steering => m_Wrapper.m_Plane_Steering;
        public InputAction @Thrust => m_Wrapper.m_Plane_Thrust;
        public InputAction @Flaps => m_Wrapper.m_Plane_Flaps;
        public InputAction @Break => m_Wrapper.m_Plane_Break;
        public InputActionMap Get() { return m_Wrapper.m_Plane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlaneActions set) { return set.Get(); }
        public void SetCallbacks(IPlaneActions instance)
        {
            if (m_Wrapper.m_PlaneActionsCallbackInterface != null)
            {
                @Steering.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnSteering;
                @Steering.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnSteering;
                @Steering.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnSteering;
                @Thrust.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnThrust;
                @Flaps.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFlaps;
                @Flaps.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFlaps;
                @Flaps.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnFlaps;
                @Break.started -= m_Wrapper.m_PlaneActionsCallbackInterface.OnBreak;
                @Break.performed -= m_Wrapper.m_PlaneActionsCallbackInterface.OnBreak;
                @Break.canceled -= m_Wrapper.m_PlaneActionsCallbackInterface.OnBreak;
            }
            m_Wrapper.m_PlaneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Steering.started += instance.OnSteering;
                @Steering.performed += instance.OnSteering;
                @Steering.canceled += instance.OnSteering;
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @Flaps.started += instance.OnFlaps;
                @Flaps.performed += instance.OnFlaps;
                @Flaps.canceled += instance.OnFlaps;
                @Break.started += instance.OnBreak;
                @Break.performed += instance.OnBreak;
                @Break.canceled += instance.OnBreak;
            }
        }
    }
    public PlaneActions @Plane => new PlaneActions(this);
    public interface IPlaneActions
    {
        void OnSteering(InputAction.CallbackContext context);
        void OnThrust(InputAction.CallbackContext context);
        void OnFlaps(InputAction.CallbackContext context);
        void OnBreak(InputAction.CallbackContext context);
    }
}
